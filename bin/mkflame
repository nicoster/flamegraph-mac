#!/bin/bash 

script_dir(){
  SOURCE="${BASH_SOURCE[0]}"
  while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done
  echo "$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
}

SCRIPTDIR=$(script_dir)

while getopts ":p:f:t:h" opt; do
  case ${opt} in
    h )
        echo "Usage: mkflame -p <pid> [-f <freq>] [-t <time>]"
        echo "      pid  - the pid of interest"
        echo "      freq - how often to take stackshots (unit: hz, default: 50)"
        echo "      time - how long to take stackshots (unit: second, default: 30)"
        exit 0
        ;;
    p )
        pid=$OPTARG
        ;;
    f )
        freq=$OPTARG
        ;;
    t )
        time=$OPTARG
      ;;
    \? )
      echo "Invalid option: $OPTARG" 1>&2
      ;;
    : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      ;;
  esac
done
shift $((OPTIND -1))


if [[ "$pid" == "" ]]; then $0 -h; exit 0; fi

freq=${freq:-50}
time=${time:-30}



function process_stackshots()
{
    if [[ -f stackshots-$pid.out ]] ; then
        stackshots=`cat stackshots-$pid.out`
        # echo $stackshots
        mkdir -p ${stackshots%.*}
        $SCRIPTDIR/../lib/foldstackshots.sh $stackshots
    fi
}

function ctrl_c() {
    if [[ -f stackshots.pid ]]; then
        trap INT
        sleep 1
        process_stackshots
    fi
}

trap ctrl_c INT
sudo LUA_PATH="$SCRIPTDIR/../?.lua;;" $SCRIPTDIR/../lib/stackshots.lua $pid -f $freq -t $time
process_stackshots